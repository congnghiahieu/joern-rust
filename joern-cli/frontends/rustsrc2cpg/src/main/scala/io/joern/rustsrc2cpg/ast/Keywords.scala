package io.joern.rustsrc2cpg.ast

object Keywords {
  val KW_AS             = "as"
  val KW_BREAK          = "break"
  val KW_CONST          = "const"
  val KW_CONTINUE       = "continue"
  val KW_CRATE          = "crate"
  val KW_ELSE           = "else"
  val KW_ENUM           = "enum"
  val KW_EXTERN         = "extern"
  val KW_FALSE          = "false"
  val KW_FN             = "fn"
  val KW_FOR            = "for"
  val KW_IF             = "if"
  val KW_IMPL           = "impl"
  val KW_IN             = "in"
  val KW_LET            = "let"
  val KW_LOOP           = "loop"
  val KW_MATCH          = "match"
  val KW_MOD            = "mod"
  val KW_MOVE           = "move"
  val KW_MUT            = "mut"
  val KW_PUB            = "pub"
  val KW_REF            = "ref"
  val KW_RETURN         = "return"
  val KW_SELFVALUE      = "self"
  val KW_SELFTYPE       = "Self"
  val KW_STATIC         = "static"
  val KW_STRUCT         = "struct"
  val KW_SUPER          = "super"
  val KW_TRAIT          = "trait"
  val KW_TRUE           = "true"
  val KW_TYPE           = "type"
  val KW_UNSAFE         = "unsafe"
  val KW_USE            = "use"
  val KW_WHERE          = "where"
  val KW_WHILE          = "while"
  val KW_ASYNC          = "async"
  val KW_AWAIT          = "await"
  val KW_DYN            = "dyn"
  val KW_ABSTRACT       = "abstract"
  val KW_BECOME         = "become"
  val KW_BOX            = "box"
  val KW_DO             = "do"
  val KW_FINAL          = "final"
  val KW_MACRO          = "macro"
  val KW_OVERRIDE       = "override"
  val KW_PRIV           = "priv"
  val KW_TYPEOF         = "typeof"
  val KW_UNSIZED        = "unsized"
  val KW_VIRTUAL        = "virtual"
  val KW_YIELD          = "yield"
  val KW_TRY            = "try"
  val KW_MACRO_RULES    = "macro_rules"
  val KW_UNION          = "union"
  val KW_STATICLIFETIME = "'static"
}

object Primitives {
  val BOOL  = "bool"
  val CHAR  = "char"
  val STR   = "str"
  val U8    = "u8"
  val U16   = "u16"
  val U32   = "u32"
  val U64   = "u64"
  val U128  = "u128"
  val USIZE = "usize"
  val I8    = "i8"
  val I16   = "i16"
  val I32   = "i32"
  val I64   = "i64"
  val I128  = "i128"
  val ISIZE = "isize"
  val F32   = "f32"
  val F64   = "f64"
}
